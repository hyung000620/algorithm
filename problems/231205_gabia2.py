"""
X 주차장에선 자동차를 주차한 시간에 따라 요금을 받는 비공개 요금제를 시행하고 있다. 주차요금은 기본요금 b 원에서 시작해 주차한 시간이 a분 지날때마다 b원씩  상승한다. 즉, 0~ (a-1) 분 주차한 경우 b원,  a~(2*a-1)분 주차한 경우 2*b원, ...의 요금을 내야한다. 단 구체적인 요금 측정 방식은 비공개로, a와 b는 양의 정수라는것외에는 알려지지 않았다.

당신은 자동차를 주차장에 t분 간 주차하려 한다. 이때 주차요금을 냈던 기록을 바탕으로 가능한 주차요금의 최솟값과 최댓값을 미리 계산해야한다.

다음은 아래 표를 바탕으로 t = 27일때 필요한 주차요금의 최솟값과 최댓값을 계산하는 예시다.
<주차 요금 기록>
주차시간(분) 4 6 21 16 26
요금 1000 1000 3000 2000 3000

1. a = 10, b = 1000일 경우 27분 주차했을때 기본요금 1000원, 이후 10분과 20분에 각각 1000원의 요금이 추가되어 총요금은 3000원
2. a= 9, b = 1000일 경우 27분 주차했을때 기본요금 1000원, 이후 9, 18,27분에 각각 1000원에 요금이 추가되어 총요금은 4000원

a,b로 가능한 값은 위 두 가지 경우 중 하나이다. 따라서 자동차를 27분 주차했을때 최소요금 3000원, 최대 요금 4000원이다
 a,b로 가능한 값이 없을 경우 -1을 배열에 담아 return 한다는 조건이 있다. 그 조건하에 다시 문제를 풀어라.

제한 사항은 아래와 같다
1 <= fees의 길이 <=100000
 - fees의 원소는 [x,y] 형태의 길이가 2인 1차원 정수 배열이다. x는 주차시간, y는 요금을 나타낸다.
1<=x<=1000000
1<=y<=1000000000

1<=t<=1000000
입출력 예시

fees [[4,1000], [6,1000], [21, 3000], [16, 2000], [26, 3000]] [[3,40000],[5, 60000]] [[3,40000], [5, 60000], [8,90000]] [[10,680],[15,600],[60,900]]
t 27 2 2 60
result [3000,4000] [30000, 40000] [30000,30000] [-1]
"""

def calculate_min_max_fees(fees, t):
    possible_values = set()

    for time, fee in fees:
        for a in range(1, time + 1):
            if time % a == 0:
                b = fee // (time // a)
                possible_values.add((a, b))

    min_fee = float('inf')
    max_fee = 0

    for a, b in possible_values:
        if t % a == 0:
            fee = (t // a) * b
        else:
            fee = (t // a + 1) * b
        min_fee = min(min_fee, fee)
        max_fee = max(max_fee, fee)

    if min_fee == float('inf') or max_fee == 0:
        return [-1]

    return [min_fee, max_fee]


